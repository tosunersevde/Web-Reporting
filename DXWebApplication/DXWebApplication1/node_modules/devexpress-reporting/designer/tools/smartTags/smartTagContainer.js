/**
* DevExpress HTML/JS Reporting (designer\tools\smartTags\smartTagContainer.js)
* Version:  23.2.4
* Build date: Jan 29, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Point } from '@devexpress/analytics-core/analytics-elements';
import { Disposable } from '@devexpress/analytics-core/analytics-utils';
import * as ko from 'knockout';
import { BandViewModel } from '../../bands/xrBand';
import { ReportViewModel } from '../../controls/xrReport';
export class SmartTagModel extends Disposable {
    constructor(selection, reportSurface, offset, smartTagFactory) {
        super();
        this.margin = ko.observable('');
        this.smartTags = ko.observableArray();
        this.visible = ko.observable(true);
        this.position = new Point(0, 0);
        this._disposables.push(selection.focused.subscribe(selectedSurface => {
            const selectedItem = selectedSurface && selectedSurface['_control'];
            if (selectedItem) {
                const reportElement = selectedItem;
                this.smartTags().forEach(x => x.dispose());
                this.smartTags(smartTagFactory[reportElement.controlType] ? smartTagFactory[reportElement.controlType](reportElement) :
                    smartTagFactory['default'] && smartTagFactory['default'](reportElement));
            }
        }));
        this._disposables.push(ko.computed(() => {
            if (!reportSurface())
                return;
            const selectedSurface = selection.focused();
            const selectedItem = selectedSurface && selectedSurface['_control'];
            if (selectedItem) {
                const position = selectedSurface['absoluteRect'] && selectedSurface['absoluteRect']();
                if (position) {
                    this.position.x(position.right + reportSurface().margins.left());
                    this.position.y(position.top);
                }
                else {
                    this.position.x(reportSurface()['_width']() + offset());
                    this.position.y(0);
                }
                this.margin(this.getMargin(selectedItem));
            }
            this.visible(selectedItem ? !ko.unwrap(selectedItem.lockedInUserDesigner) : false);
        }).extend(({ rateLimit: { timeout: 1, method: 'notifyWhenChangesStop' } })));
    }
    getMargin(reportElement) {
        if (reportElement instanceof ReportViewModel)
            return '3px';
        const margin = reportElement instanceof BandViewModel ? -22 : 9;
        return margin + 'px';
    }
}

/**
* DevExpress HTML/JS Reporting (designer\services\_reportDataSourceService.js)
* Version:  23.2.4
* Build date: Jan 29, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { ajax } from '@devexpress/analytics-core/analytics-internal';
import { ModelSerializer } from '@devexpress/analytics-core/analytics-utils';
import * as $ from 'jquery';
import { HandlerUri } from '../utils/settings';
export class ReportDataSourceService {
    static fieldListCallback(request) {
        const requestJson = JSON.stringify(request);
        const encodedJson = encodeURIComponent(requestJson);
        return ajax(HandlerUri(), 'fieldList', encodedJson);
    }
    static getCustomQueriesPreset(dataSource) {
        return $.Deferred().resolve([]).promise();
    }
    static getWizardSqlDataConnections() {
        return ajax(HandlerUri(), 'getWizardSqlDataConnections', encodeURIComponent(''));
    }
    static getWizardJsonDataConnections() {
        return ajax(HandlerUri(), 'getWizardJsonDataConnections', encodeURIComponent(''));
    }
    static sqlDataSourceFromBase64(base64) {
        return ajax(HandlerUri(), 'dataSourceFromBase64', encodeURIComponent(base64));
    }
    static sqlRebuildResultSchema(base64) {
        return ajax(HandlerUri(), 'sqlRebuildResultSchema', encodeURIComponent(base64));
    }
    static getSqlDataSourceBase64(dataSource) {
        return ajax(HandlerUri(), 'getDataSourceBase64', encodeURIComponent(JSON.stringify({ sqlDataSourceJSON: JSON.stringify({ SqlDataSource: new ModelSerializer().serialize(dataSource) }) })));
    }
    static federationDataSourceFromBase64(base64, dependentDataSources) {
        return ajax(HandlerUri(), 'federationDataSourceFromBase64', encodeURIComponent(JSON.stringify({ base64: base64, dataSources: dependentDataSources })));
    }
    static federationRebuildResultSchema(base64, dependentDataSources) {
        return ajax(HandlerUri(), 'federationRebuildResultSchema', encodeURIComponent(JSON.stringify({ base64: base64, dataSources: dependentDataSources })));
    }
    static getFederationDataSourceBase64(dataSource, dependentDataSources) {
        return ajax(HandlerUri(), 'getFederationDataSourceBase64', encodeURIComponent(JSON.stringify({ federationDataSourceJSON: JSON.stringify({ FederationDataSource: new ModelSerializer().serialize(dataSource) }), dataSources: dependentDataSources })));
    }
    static getJsonDataSourceBase64(dataSource) {
        return ajax(HandlerUri(), 'getJsonDataSourceBase64', encodeURIComponent(JSON.stringify({ jsonDataSourceJSON: JSON.stringify({ JsonDataSource: new ModelSerializer().serialize(dataSource) }) })));
    }
    static getObjectDataSourceBase64(json) {
        return ajax(HandlerUri(), 'getObjectDataSourceBase64', encodeURIComponent(JSON.stringify(json)));
    }
    static editObjectDataSourceParameters(json, base64) {
        return ajax(HandlerUri(), 'editObjectDataSourceParameters', encodeURIComponent(JSON.stringify({ objectDataSourceModel: json, base64: base64 })));
    }
    static objectDataSourceFromBase64(base64) {
        return ajax(HandlerUri(), 'objectDataSourceFromBase64', encodeURIComponent(base64));
    }
    static jsonDataSourceFromBase64(base64) {
        return ajax(HandlerUri(), 'jsonDataSourceFromBase64', encodeURIComponent(JSON.stringify({ base64: base64 })));
    }
}

/**
* DevExpress Analytics (property-grid\widgets\ellipsiseditor\_editor.js)
* Version:  23.2.4
* Build date: Jan 29, 2024
* Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import registerComponent from 'devextreme/core/component_registrator';
import 'devextreme/ui/text_box';
import dxTextBox from 'devextreme/ui/text_box';
import * as $ from 'jquery';
import * as ko from 'knockout';
import { addDisposeCallback } from '../../../serializer/_internal';
import { SvgTemplatesEngine } from '../internal/_svgTemplateEngine';
import { KeyboardEnum } from '../internal/_utils';
const editor_prefix = 'dx-ellipsiseditor', EDITOR_CLASS = editor_prefix + ' dx-dropdowneditor', EDITOR_BUTTON_CLASS = editor_prefix + '-button dx-widget dx-button-normal dx-dropdowneditor-button dx-ellipsis-button', EDITOR_BUTTON_ICON_CLASS = editor_prefix + '-icon dx-ellipsis-image dx-dropdowneditor-icon', EDITOR_BUTTON_ICON_TEMPLATE = 'dxrd-svg-ellipsis', EDITOR_WARNING_STATE_CLASS = 'dx-ellipsiseditor-warning';
export class dxEllipsisEditor extends dxTextBox {
    constructor(element, options) {
        super(element, options);
    }
    _init() {
        super['_init'].apply(this);
        if (!this._$element) {
            this._$element = $.fn.constructor(this.element());
        }
        this._$element.addClass(EDITOR_CLASS);
        this._koContext = ko.contextFor(this._$element.get(0));
    }
    _render() {
        super['_render'].apply(this);
        this._renderButton();
        this._updateWarningState();
        this._attachInputEvents();
    }
    _updateWarningState(value = this.option('warningMessage')) {
        if (value) {
            this._$element.attr('title', value.toString());
            this._$element.addClass(EDITOR_WARNING_STATE_CLASS);
        }
        else {
            this._$element.removeAttr('title');
            this._$element.removeClass(EDITOR_WARNING_STATE_CLASS);
        }
    }
    _renderButton() {
        this._$button = $.fn.constructor('<div />').addClass(EDITOR_BUTTON_CLASS);
        this._attachButtonEvents();
        this._$buttonIcon = $.fn.constructor('<div />').addClass(EDITOR_BUTTON_ICON_CLASS).height('100%').append(SvgTemplatesEngine.templates[EDITOR_BUTTON_ICON_TEMPLATE]).appendTo(this._$button);
        ko.applyBindingsToDescendants(this._koContext, this._$buttonIcon[0]);
        const buttonsContainer = this['_buttonsContainer']();
        this._$button.appendTo(buttonsContainer);
    }
    _updateButtonSize() {
        this._$buttonIcon.height($.fn.constructor(this.element()).height());
    }
    _attachButtonEvents() {
        const subscribeElements = [];
        if (!this._$input)
            this._$input = $.fn.constructor(this['_input']());
        this._$button.off('click');
        this._$input.off('click');
        if (!this.option('disabled'))
            subscribeElements.push(this._$button);
        if (this.option('openOnFieldClick'))
            subscribeElements.push(this._$input);
        subscribeElements.forEach(($element) => {
            $element.on('click', this.buttonAction.bind(this));
        });
    }
    _attachInputEvents() {
        const input = this['_input']()[0];
        if (!input)
            return;
        const handler = (e) => {
            if (e.key == KeyboardEnum.Enter || (e.key == KeyboardEnum.ArrowDown && e.altKey)) {
                this.buttonAction(e);
            }
        };
        input.addEventListener('keydown', handler);
        addDisposeCallback(input, function () {
            input.removeEventListener('keydown', handler);
        });
    }
    _optionChanged(args) {
        switch (args.name) {
            case 'disabled':
                this._attachButtonEvents();
                break;
            case 'warningMessage':
                this._updateWarningState(args.value);
                break;
        }
        super['_optionChanged'].apply(this, arguments);
    }
    buttonAction(e) {
        if (this.option('buttonAction')) {
            this.option('buttonAction')();
            e.stopPropagation();
        }
    }
}
registerComponent('dxEllipsisEditor', dxEllipsisEditor);
